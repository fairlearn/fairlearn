# Copyright (c) Microsoft Corporation and Fairlearn contributors.
# Licensed under the MIT License.

import numpy as np


y_t = np.asarray(
    [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,
        1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1]
)

y_p = np.asarray(
    [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1,
        1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
        1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1]
)

s_w = np.asarray(
    [1, 2, 3, 1, 2, 1, 2, 3, 1, 1, 1, 2, 3, 3, 1, 2, 1, 1, 1, 2, 3,
        2, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 2, 1, 3, 2, 3, 3, 4, 1, 4, 1,
        3, 1, 1, 1, 2, 3, 3, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 3, 2, 1, 2,
        2, 3, 2, 3, 2, 3, 4, 1]
)

y_score = np.asarray(
    [0.33718197,  0.37572143,  0.43324912,  0.72110035,  0.10425623,
        0.99430915,  0.85230535,  0.56812172,  0.84614452,  0.97170775,
        0.44120088,  0.13125367,  0.06649231,  0.02632365,  0.50486064,
        0.66519374,  0.04852106,  0.83051253,  0.91216736,  0.17133148,
        0.26889584,  0.12353804,  0.85604488,  0.19107368,  0.45983474,
        0.07899517,  0.4762549 ,  0.95431664,  0.66132436,  0.54292442,
        0.9959482 ,  0.33288605,  0.34896411,  0.78120948,  0.93448071,
        0.08078187,  0.47240322,  0.93132372,  0.66644378,  0.1086034 ,
        0.91504472,  0.55501804,  0.45449758,  0.85856087,  0.11861641,
        0.37072507,  0.22932736,  0.40809745,  0.86609104,  0.73294941,
        0.76468024,  0.91517101,  0.066768  ,  0.05182196,  0.83771352,
        0.66635825,  0.27949421,  0.82578978,  0.35953264,  0.23948992,
        0.51838544,  0.24824458,  0.81847099,  0.85661729,  0.55295   ,
        0.25302307,  0.70272788,  0.50155201,  0.08571844,  0.65529285,
        0.16439742]
)


def group_gen(x, runs, groups):
    # For producing arrays such as ['a', 'a', 'b', 'b', 'a', 'a', ... ]
    return groups[(x//runs) % len(groups)]


def array_gen(groups, run_length, num_samples):
    vals = [group_gen(x, run_length, groups) for x in range(num_samples)]
    return np.asarray(vals)


g_1 = array_gen(['aa', 'ba'], 2, len(y_t))
g_2 = array_gen(['f', 'g'], 3, len(y_t))
g_3 = array_gen(['kk', 'm'], 4, len(y_t))
g_4 = array_gen(['pp', 'q'], 5, len(y_t))

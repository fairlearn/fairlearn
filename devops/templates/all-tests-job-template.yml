# template for setting up the python environment (with optional pinned requirements)
# and running all tests (except for install tests)

parameters:
  platform: ''
  vmImage: ''
  testRunType: ''
  installationType: ''
  pyVersions: [3.5, 3.6, 3.7, 3.8]
  pinRequirements: False
  freezeArtifactStem: 
  freezeFileStem:

jobs:
- job: ${{ parameters.platform }}_${{parameters.testRunType}}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 2
    matrix:
      ${{ each pyVer in parameters.pyVersions }}:
        ${{ pyVer }}:
          PyVer: ${{ pyVer }}
          RequirementsFile: requirements-${{pyVer}}.txt
          FreezeArtifact: '${{parameters.freezeArtifactStem}}${{parameters.platform}}${{parameters.testRunType}}${{pyVer}}'
          FreezeFile: '${{parameters.freezeFileStem}}-${{parameters.name}}${{pyVer}}.txt'

  steps:

  - ${{ if notIn(parameters.testRunType, 'Unit', 'Notebooks') }}:
    - script: exit 1
      displayName: "Bad testRunType: ${{parameters.testRunType}}"

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PyVer)'
    inputs:
      versionSpec: '$(PyVer)' 
      addToPath: true

  - template: python-infra-upgrade-steps-template.yml

  - template: requirements-installation-steps-template.yml
    parameters:
      pyVer: '$(PyVer)'
      requirementsFile: $(RequirementsFile)
      pinRequirements: ${{parameters.pinRequirements}}

  - template: pip-freeze-to-artifact-steps-template.yml
    parameters:
      freezeArtifact: $(FreezeArtifact)
      freezeFile: $(FreezeFile)

  - template: fairlearn-installation-step-template.yml
    parameters:
      installationType: ${{parameters.installationType}}
    
  - script: flake8 .
    displayName: "Run flake8"

  # =================================================
  - ${{ if eq(parameters.testRunType, 'Unit')}}:
    - script: python -m pytest test/ --ignore=test/install -m "not notebooks" --junitxml=./TEST--TEST.xml -o junit_suite_name="$(Agent.JobName)"
      displayName: 'Run unit tests'

  - ${{ if eq(parameters.testRunType, 'Notebooks')}}:
    - script: python -m pytest test/ -m notebooks --junitxml=./TEST-TEST.xml -o junit_suite_name="$(Agent.JobName)"
      displayName: 'Run notebooks as tests'
  # =================================================

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    condition: succeededOrFailed()
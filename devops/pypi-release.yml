variables:
  poolImage: "ubuntu-latest"
  poolPythonVersion: 3.6

trigger: none # No CI build

pr: none # Not for pull requests


stages:
- stage: PreUnit
  dependsOn: []
  pool:
    vmImage: $(PoolImage)
    
  jobs:
  - template: all-tests-job-template.yml
    parameters:
      name: Linux
      vmImage: 'ubuntu-16.04' # Will want to add other platforms and pyVersions back in eventually
      pyVersions: [3.6] 

- stage: PreNotebooks
  dependsOn: []
  pool:
    vmImage: $(PoolImage)

  jobs:
  - template: notebook-job-template.yml
    parameters:
      name: LinuxNotebooks
      vmImage: 'ubuntu-16.04'
      pyVersions: [3.6] # Will want to add other versions etc. back in eventually

# =================================================================================================================

- stage: CreateTestPyPIPackage
  dependsOn:
  - PreUnit
  - PreNotebooks

  jobs:
  - job: Create_PyPI_Test_Package
    pool:
      vmImage: $(PoolImage)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(poolPythonVersion)'
      inputs:
        versionSpec: $(poolPythonVersion)
        addToPath: true
    
    - script: pip install setuptools wheel 
      displayName: 'Install setuptools'

    - script: pip install -r requirements.txt
      displayName: "Install fairlearn requirements"

    - task: PowerShell@2
      name: BuildTestWheelsTask
      displayName: 'Build wheels for test'
      inputs:
        filePath: scripts/build-test-wheels.ps1
        pwsh: true

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/dist
        artifact: TestPackages

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/test-version.txt
        artifact: TestVersionFile
      
- stage: DeployToPyPITest
  dependsOn: CreateTestPyPIPackage
  jobs:
  - deployment: "Deploy_to_PyPI_Test"
    environment: "PyPI-Test Deployment"
    pool:
      vmImage: $(PoolImage)

    strategy:
      runOnce:
       deploy:
        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python $(poolPythonVersion)'
            inputs:
              versionSpec: $(poolPythonVersion)
              addToPath: true

          - script: pip install twine
            displayName: 'Install twine'

          - script: ls -R $(Pipeline.Workspace)
            displayName: "List files in Pipeline.Workspace"

          - script: echo "python twine upload --repository-url https://test.pypi.org/legacy/ $(Pipeline.Workspace)/TestPackages/*"
            displayName: "Upload to PyPI-Test"


# =================================================================================================================

- stage: ValidateTestPyPIPackageUnit
  dependsOn: DeployToPyPITest
  

  jobs:
  - job: "Validate_Test_Package_Unit"
    pool:
      vmImage: $(PoolImage)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(poolPythonVersion)'
      inputs:
        versionSpec: $(poolPythonVersion)
        addToPath: true
    
    - task: PowerShell@2
      name: SetVariableTask
      displayName: 'Fetch PyPI-Test version from artifact'
      inputs:
        filePath: scripts/set-variable-from-file.ps1
        arguments: "-baseDir $(Pipeline.Workspace) -subDir TestVersionFile -fileName test-version.txt -targetVariable PyPITestVersion"
        pwsh: true

    - script: cp -r $(Build.Repository.LocalPath)/test/ $(Agent.TempDirectory)/
      displayName: "Copy Tests to temp directory"

    - script: ls -R
      displayName: "List files"
      workingDirectory: $(Agent.TempDirectory)/

    - script: pip install -r requirements.txt
      displayName: "Install fairlearn requirements from regular PyPI"

    - script: echo $(PyPITestVersion)
      displayName: "Show PyPITestVersion"

    - script: pip install --index-url https://test.pypi.org/simple/ --no-deps fairlearn
      displayName: "Install fairlearn from PyPI-Test"

      # Will want to adjust the set of tests run...
    - script: python -m pytest test/unit/metrics --ignore=test/perf --junitxml=./TEST--TEST.xml -o junit_suite_name="PyPI-Test-Validation"
      displayName: "Run Unit Tests"
      workingDirectory: $(Agent.TempDirectory)/

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/TEST-*.xml'
      inputs:
        searchFolder: $(Agent.TempDirectory)/
      condition: succeededOrFailed()
      
- stage: ValidateTestPyPIPackateNotebooks
  dependsOn: DeployToPyPITest

  jobs:
  - job: "Validate_Test_Package_Notebooks"
    pool:
      vmImage: $(PoolImage)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(poolPythonVersion)'
      inputs:
        versionSpec: $(poolPythonVersion)
        addToPath: true
    
    - script: 

# =================================================================================================================

- stage: CreatePyPIPackage
  dependsOn:
  - ValidateTestPyPIPackageUnit
  - ValidateTestPyPIPackateNotebooks
  jobs:
  - job: Create_PyPI_Package
    pool:
      vmImage: $(PoolImage)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(poolPythonVersion)'
      inputs:
        versionSpec: $(poolPythonVersion)
        addToPath: true
    
    - script: pip install setuptools wheel 
      displayName: 'Install setuptools'

    - script: pip install -r requirements.txt
      displayName: "Install fairlearn requirements"

    - script: python setup.py sdist bdist_wheel
      displayName: "Create wheels"

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/dist
        artifact: Packages

              
- stage: DeployToPyPI
  dependsOn: CreatePyPIPackage
  jobs:
  - deployment: "Deploy_to_PyPI"
    environment: "PyPI Deployment"
    pool:
      vmImage: $(PoolImage)

    strategy:
      runOnce:
       deploy:
        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python $(poolPythonVersion)'
            inputs:
              versionSpec: $(poolPythonVersion)
              addToPath: true

          - script: pip install twine
            displayName: 'Install twine'

          - script: ls -R $(Pipeline.Workspace)
            displayName: "List files in Pipeline.Workspace"

          - script: echo "python twine upload $(Pipeline.Workspace)/Packages/*"
            displayName: "Upload to PyPI"